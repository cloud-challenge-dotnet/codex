@page "/account/login"
@inject IStringLocalizer<AppResource> localizer
@inject IAuthenticationService AuthenticationService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject IApplicationData ApplicationData

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">@localizer[AppResource.LOG_IN]</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>@localizer[AppResource.USER_NAME]</label>
                    <InputText @bind-Value="model.Login" class="form-control" name="login" />
                    <ValidationMessage For="@(() => model.Login)" />
                </div>
                <div class="form-group">
                    <label>@localizer[AppResource.PASSWORD]</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" name="password" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <div class="form-group">
                    <label>@localizer[AppResource.TENANT]</label>
                    <InputText @bind-Value="model.TenantId" class="form-control" name="tenantId" />
                    <ValidationMessage For="@(() => model.TenantId)" />
                </div>
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    @localizer[AppResource.LOG_IN]
                </button>
            </EditForm>
        </div>
    </div>
</div>
@code {
    private UserLoginModel model = new();
    private bool loading;

    protected override void OnInitialized()
    {
        if (ApplicationData!.Auth != null)
        {
            NavigationManager.NavigateTo("account/logout");
        }
        base.OnInitialized();
    }

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            var auth = await AuthenticationService.AuthenticateAsync(
                new(model.Login!, model.Password!, model.TenantId!)
            );
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception exception)
        {
            AlertService.Error(exception is FunctionnalException ? exception.Message : @localizer[AppResource.AN_ERROR_OCCURED]!);
            loading = false;
            StateHasChanged();
        }
    }
}